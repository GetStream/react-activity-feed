{"version":3,"sources":["webpack:///../src/components/InfiniteScroll.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","InfiniteScroll","__position","__code","__scope","Playground","Props","LoadingIndicator","resolveAfter","StatefulComponent","initialValue","loading","data","Array","fill","state","setState","isLoading","loader","key","hasMore","length","loadMore","pv","then","map","value","index","isMDXComponent"],"mappings":"m5BAYO,IAAMA,EAAe,Q,mNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,kBACE,GAAM,kBADR,kBAGA,kBACE,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIC,IAAgBF,QAAQ,UACnC,kBACE,GAAM,eADR,eAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,wvBAA2vBC,SAAO,GACnyBN,QACAH,kBACAU,eACAC,UACAC,qBACAN,mBACAO,iBACAC,uBARmyB,gBASnyBd,IATmyB,EAUnyBH,eAVmyB,GAWlyBO,QAAQ,cAIb,YAAC,IAAD,CAAmBW,aAAc,CAC3BC,SAAS,EACTC,KAAMC,MAAM,IAAIC,KAAK,OACpBf,QAAQ,sBACZ,oBACKgB,MACEJ,EAFP,EAEOA,QACAC,EAHP,EAGOA,KAEFI,EALL,EAKKA,SALL,OAMS,YAAC,IAAD,CAAgBC,UAAWN,EAASO,OAAQ,YAAC,IAAD,CAAkBC,IAAI,SAASpB,QAAQ,qBAAuBqB,QAASR,EAAKS,OAAS,IAAKC,SAAU,WACpJN,GAAS,SAAAO,GAAE,cAAUA,GAAV,IACTZ,SAAS,OAEXH,YAAa,KAAMgB,MAAK,WACtBR,GAAS,SAAAO,GAAE,MAAK,CACdZ,SAAS,EACTC,KAAM,GAAF,mBAAMW,EAAGX,MAAT,YAAkBC,MAAM,IAAIC,KAAK,gBAGxCf,QAAQ,kBACVa,EAAKa,KAAI,SAACC,EAAOC,GAAR,OAAkB,mBAAKR,IAAKQ,GAAQA,iB,iNAQtD/B,EAAWgC,gBAAiB","file":"component---src-components-infinite-scroll-mdx-dc40a26117bd990d68a7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/amin/Stream/react-activity-feed/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { LoadingIndicator } from 'react-file-utils';\nimport { InfiniteScroll } from './InfiniteScroll';\nimport { resolveAfter, StatefulComponent } from './docz';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"infinitescroll\"\n    }}>{`InfiniteScroll`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={InfiniteScroll} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'{/* Change hasMore condition to trigger loading (load more items) */}\\n<StatefulComponent\\n  initialValue={{ loading: false, data: Array(50).fill(null) }}\\n>\\n  {({ state: { loading, data }, setState }) => (\\n    <InfiniteScroll\\n      isLoading={loading}\\n      loader={<LoadingIndicator key=\\\"loader\\\" />}\\n      hasMore={data.length < 100}\\n      loadMore={() => {\\n        setState(pv => ({ ...pv, loading: true }))\\n        resolveAfter(1000).then(() => {\\n          setState(pv => ({\\n            loading: false,\\n            data: [...pv.data, ...Array(50).fill(null)],\\n          }))\\n        })\\n      }}\\n    >\\n      {data.map((value, index) => (\\n        <div key={index}>{index}</div>\\n      ))}\\n    </InfiniteScroll>\\n  )}\\n</StatefulComponent>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      LoadingIndicator,\n      InfiniteScroll,\n      resolveAfter,\n      StatefulComponent,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {\n        /* Change hasMore condition to trigger loading (load more items) */\n      }\n  <StatefulComponent initialValue={{\n        loading: false,\n        data: Array(50).fill(null)\n      }} mdxType=\"StatefulComponent\">\n    {({\n          state: {\n            loading,\n            data\n          },\n          setState\n        }) => <InfiniteScroll isLoading={loading} loader={<LoadingIndicator key=\"loader\" mdxType=\"LoadingIndicator\" />} hasMore={data.length < 100} loadMore={() => {\n          setState(pv => ({ ...pv,\n            loading: true\n          }));\n          resolveAfter(1000).then(() => {\n            setState(pv => ({\n              loading: false,\n              data: [...pv.data, ...Array(50).fill(null)]\n            }));\n          });\n        }} mdxType=\"InfiniteScroll\">\n        {data.map((value, index) => <div key={index}>{index}</div>)}\n      </InfiniteScroll>}\n  </StatefulComponent>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}